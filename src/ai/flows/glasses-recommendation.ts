// This is an autogenerated file from Firebase Studio.

'use server';

/**
 * @fileOverview This file defines a Genkit flow for recommending eyeglasses based on user needs.
 *
 * - `glassesRecommendation`: A function that takes user input describing their needs and returns a recommendation for suitable eyeglasses.
 * - `GlassesRecommendationInput`: The input type for the `glassesRecommendation` function.
 * - `GlassesRecommendationOutput`: The output type for the `glassesRecommendation` function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const GlassesRecommendationInputSchema = z.object({
  needsDescription: z
    .string()
    .describe('A description of the user\'s needs for eyeglasses (e.g., \'glasses for reading\', \'glasses for sports\').'),
});
export type GlassesRecommendationInput = z.infer<typeof GlassesRecommendationInputSchema>;

const GlassesRecommendationOutputSchema = z.object({
  recommendation: z
    .string()
    .describe('A recommendation for suitable eyeglasses based on the user\'s needs description.'),
});
export type GlassesRecommendationOutput = z.infer<typeof GlassesRecommendationOutputSchema>;

export async function glassesRecommendation(input: GlassesRecommendationInput): Promise<GlassesRecommendationOutput> {
  return glassesRecommendationFlow(input);
}

const glassesRecommendationPrompt = ai.definePrompt({
  name: 'glassesRecommendationPrompt',
  input: {schema: GlassesRecommendationInputSchema},
  output: {schema: GlassesRecommendationOutputSchema},
  prompt: `You are an expert in recommending eyeglasses based on user needs.

  Given the following description of the user's needs, recommend a suitable pair of eyeglasses from our catalog.

  Needs Description: {{{needsDescription}}}

  Your recommendation should be concise and explain why the recommended glasses are suitable for the user's needs.
  If you can't make a recommendation, explain why.`, //Can't access product catalog
});

const glassesRecommendationFlow = ai.defineFlow(
  {
    name: 'glassesRecommendationFlow',
    inputSchema: GlassesRecommendationInputSchema,
    outputSchema: GlassesRecommendationOutputSchema,
  },
  async input => {
    const {output} = await glassesRecommendationPrompt(input);
    return output!;
  }
);
